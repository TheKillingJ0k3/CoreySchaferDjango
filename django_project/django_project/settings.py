"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 3.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

"""
cd django_project
# activate venv: myvenv\Scripts\activate
# (python manage.py migrate from DjangoGirls folder)
# starting web server: python manage.py runserver

DB:
python manage.py makemigrations detects changes
python manage.py migrate -> creates auth_user table -> then we can login as admin in server
ORM = object relation mapper, easy access to database, use different dbs without changing code
models.py: create class post -> make migrations ok
python manage.py sqlmigrate blog 0001 -> writes sql
python manage.py migrate -> migrations allow us to make changes to dbs even if we have data inside (makemigrations -> migrate)
python manage.py shell -> 
>>> from blog.models import Post
>>> from django.contrib.auth.models import User
>>> User.objects.all()
>>> User.objects.first()
>>> User.objects.filter(username='ggpat') 
>>> user = User.objects.filter(username='ggpat').first() -> user/id, user.pk, 
post_1 = Post(title='Blog 1', content='First Post Content', author=user) 
post_1.save()
add "    def __str__(self):
        return self.title" to models.py
        
User registration: new app
python manage.py startapp users, create register template, create forms.py file inside users, use crispyforms app to put tags in template for bootstrap
add app in settings



# create app: python manage.py startapp blog
# change models -> tell python we have changes in model: python manage.py makemigrations blog
# apply migration file to db: python manage.py migrate blog
# change admin.py
# create superuser to login: python manage.py createsuperuser (ggpat / GG-hotmail / PH@1gr => SAME IN PYTHONANYWHERE)
#login -> see Django admin dashboard

#Deploy = make site onine - server provider = PythonAnywhere
# add git init in project folder - git config name/email
# .gitignore to ignore files for updates (new file in VS Code saved in base dir)
# use separate databases for your local testing site and your live website on PythonAnywhere
# create PythonAnywhere account - yourusername.pythonanywhere.com
# create PythonAnywhere API token (4860c7b395d9bab1c7a647a6b9aa2b3842c2ef56)
# $ pip3.8 install --user pythonanywhere in PythonAnywhere Bash and then $ pa_autoconfigure_django.py --python=3.8 https://github.com/<your-github-username>/my-first-blog.git
# initialize the admin account with createsuperuser (virtualenv automatically activated) so we run (username.pythonanywhere.com) $ python manage.py createsuperuser

#urls: use urls.py / create new urls file inside blog
# we put the site logic in views: it reqursts info from model and pass it to a template

# Django's interactive console: python manage.py shell
# views connect models and templates so that we can see posts in our site / post_list view we will need to take the models we want to display and pass them to the template
"""


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3)c3k7dc5et(t9169c+wx5%g8w&jj^8b17^x7ld9+wship-x^^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [ # add app every time I create a new one
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog.apps.BlogConfig', # check app->apps.py and add class BlogConfig(BlogConfig): name = 'blog')
    'users.apps.UsersConfig', # check app->apps.py and add class UsersConfig(AppConfig): name = 'users')
    'crispy_forms',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_TEMPLATE_PACK = 'bootstrap4' #because default 2 is outdated
